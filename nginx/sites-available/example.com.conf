# The keepalive 64; directs nginx to keep a minimum of 64 HTTP/1.1 connections
# to the proxy server at any given time. This is a true minimum:
# if there is more traffic then nginx will open more connections to the proxy.
upstream example_upstream {
  server localhost:8000;
  keepalive 64;
}

server {
  listen 80;
  listen [::]:80;
  server_name example.com www.example.com;

  # Needed for the let's encrypt acme challenge
  location /.well-known/ {
    root /home/websites/acmechallenge;
    try_files $uri $uri/ =404;
  }

  # Redirect all http requests to https
  location / {
    return 301 https://$server_name$request_uri;
  }
}

server {
  listen 443 ssl http2;
  listen [::]:443 ssl http2;
  server_name example.com www.example.com;

  include /etc/nginx/include.d/security.conf;

  # Include your ssl keys
  ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

  ssl_session_cache shared:SSL:10m;
  ssl_session_timeout 20m;

  ssl_dhparam /etc/ssl/private/dhparam_2048.pem;

  ssl_stapling on;
  ssl_stapling_verify on;
  ssl_trusted_certificate /etc/letsencrypt/live/example.com/fullchain.pem;

  add_header Strict-Transport-Security max-age=31536000;  # Valid for 1 year

  ssl_prefer_server_ciphers on;
  ssl_ciphers 'ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS';

  ssl_buffer_size 8k;

  # Handle static file from nginx. This is better than nodeJS
  location ~ ^/(build/|static/|robots.txt|humans.txt|favicon.ico) {
    root /var/www/example.com/public;
    access_log off;
    expires max;
  }

  location / {
    include /etc/nginx/include.d/security.conf;
    proxy_pass http://example_upstream;
  }
}